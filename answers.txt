sort1 uses: Bubble Sort

How do you know?: Consistently the slowest algorithm, especially in when sorting item heavy arrays. However when sorting a presorted array, it is consistently the fastest; this hints at the fact that sort1 has a condition top quit when an array 
is already sorted. Bubble sort is the only algorithm that behaves so slowly, yet has an efficient lower bound.

sort2 uses: Merge Sort

How do you know?: The most consistent algorithm, usually faster than the others and always faster than sort3 (sort3 has a consistent theta notation of n^2). The only time it fails to win the race is when sort1 is in its ideal conditions and
its lower bound is expressed in it's time performance.

sort3 uses: Selection

How do you know?: The most consistently slow algorithm, with no efficiency condition.
